/*
This pipeline build example is for a Nodejs application.  The stages within this pipeline will build the app, tag GIT,
package the app into a zip file, perform a Nexus IQ scan, then upload the package to Nexus IQ.  These builds are intended
to be release candidate builds that could be deployed to production if all quality and sign off gates pass.

Authors:
Sean Wilbur (sean.wilbur@perficient.com)
Geoff Rosenthal (geoffrey.rosenthal@perficient.com)

Â© 2018 Perficient, Inc. All Rights Reserve
*/

@Library('jenkins-shared-library') _

pipeline{

  agent { label 'nodejs' }

  options {
    disableConcurrentBuilds()
  }

  environment {
    // Globally defined in Jenkins Master or un-commented here:
    // GIT_CREDSID =
    // NEXUS_URL =

    // Application Specific
    GIT_PROJECT="GITorg/GITrepo"
    NEXUS_REPOSITORY="App-RC"
    NEXUS_GROUP="App-Group"
    NEXUS_ARTIFACTID="App_Name"


    // build time Variables
    TARGET_VERSION=''
    VERSION_TAG=''
    ARTIFACT_FILENAME=''
    NEXUS_IQ_STAGE=''
  }

  parameters {
    booleanParam (
      name: 'TAG_GIT',
      defaultValue: false,
      description: 'Enable or disable tagging the commit in Git for reference.'
    )
  }

  // poll for RC builds
  triggers {
    // Poll SCM every 60 minutes for changes
    pollSCM('H/60 * * * *')
  }

  stages{
    // Cleanup the workspace to start from scratch
    stage( "Clean WorkSpace and checkout source" ) {
      steps{
        cleanWs()
        // workaround to get GIT plugin environment Variables, we need to collect the checkout command output, which is a map that contains them
        // https://issues.jenkins-ci.org/browse/JENKINS-35230
        script{
          scm_map = checkout scm
          GIT_BRANCH = scm_map['GIT_BRANCH']
          // get just the branch name minus the remote only splitting on first
          // match in case the rest of the branch has more '/' chars.
          GIT_BRANCH_NAME = GIT_BRANCH.split('/',2)[1]
        }
      }
    }

    stage( "Setup Environment Variables" ) {
      //Setup environment variables to be used later in build.  In this example, Jenkins was used for deployment.  Deployment target Environment
      //was based upon which branch build was created from.
      steps{
        script {

          switch (GIT_BRANCH_NAME) {
            case 'master':
              NEXUS_IQ_STAGE = 'release'
              break
            case 'develop':
              NEXUS_IQ_STAGE = 'stage-release'
              break
            default:
             // empty DEPLOY_ENV will skip deployment stage
              DEPLOY_ENV = ''
              break
          }
          //Find and store semantic version as specified in package.json to use to create build version label
          def props = readJSON file: 'package.json'
          def version = props['version']

          TARGET_VERSION = "$version-$BUILD_TIMESTAMP_STRING"
          VERSION_TAG="${TARGET_VERSION}"
          ARTIFACT_FILENAME="${NEXUS_ARTIFACTID}-${VERSION_TAG}.zip"
          // modify build name to match
          currentBuild.displayName = "${VERSION_TAG}"
        }
        // output some information about the environment we just setup
        sh "echo 'package.json version: ${TARGET_VERSION}'"
        sh "echo 'version_tag: ${VERSION_TAG}'"
        sh "echo 'artifact_filename: ${ARTIFACT_FILENAME}'"
      }
    }

    stage( "NPM Install" ) {
      steps{
        sh 'npm install'
      }
    }

    stage( "NPM Test" ) {
      steps{
          //sh 'npm run test'
          echo 'should run npm run test'
      }
    }

    stage( "NPM Build" ) {
      steps{
        sh 'npm run build'
        // also copy our deploy folder to be packaged with build
        sh 'cp -rv deploy build/'
        sh 'cp -rv node_modules build/'
      }
    }

    stage( "tag the commit with date time" ) {
      when { expression { return params.TAG_GIT }}
      steps{
        echo 'Tagging this version and pushing tag to remote repository'
        sh "git tag -a ${VERSION_TAG} -m 'Release Candidate ${VERSION_TAG}' "
        sshagent(["${GIT_CREDSID}"]) {
          sh "git push git@github.com:${GIT_PROJECT}.git --tags"
        }
      }
    }

    stage( "package into zip file" ){
      steps{
        dir( "build" ){
           sh "zip -r --quiet ../${ARTIFACT_FILENAME} *"
         }
      }
    }

    stage( "IQ Scans") {
      //Uses Nexus IQ connection as defined in Jenkins Master->Configure System
      steps{
        sh "echo 'Uploading to IQ: ${NEXUS_ARTIFACTID} stage: ${NEXUS_IQ_STAGE} file: ${ARTIFACT_FILENAME}'"
        nexusPolicyEvaluation failBuildOnNetworkError: false,
            iqApplication: NEXUS_ARTIFACTID,
            iqScanPatterns: [[scanPattern: ARTIFACT_FILENAME ]],
            iqStage: NEXUS_IQ_STAGE,
            jobCredentialsId: ''
      }
    } // stage

    stage( "Upload to Nexus" ) {
      steps{
        nexusArtifactUploader artifacts: [[artifactId: NEXUS_ARTIFACTID, classifier: '',
          file: ARTIFACT_FILENAME, type: 'zip']],
          credentialsId: NEXUS_CREDSID,
          groupId: NEXUS_GROUP,
          nexusUrl: NEXUS_SERVER,
          nexusVersion: 'nexus3',
          protocol: 'https',
          repository: NEXUS_REPOSITORY,
          version: TARGET_VERSION
      }// End step
    }//End upload stage
  }//end stages
/*
  post {
    success {
      //  slackSend color: '#00ff00', message: 'OnlineBind UI Build Success'
      // trigger downstream job to deploy to DEV1
    }
    failure {
        // check if the git tagging was enabled, may be we do not need to delete
    sh "git tag -d ${VERSION_TAG}"
    sshagent([ GIT_CREDSID ]) {
    sh "git push --delete :origin refs/tags/${VERSION_TAG}"

          // slackSend color: '#ff0000', message: 'OnlineBind UI Build failure'
    }
    } // end failure

  }//end post steps
 */
}//end pipeline
